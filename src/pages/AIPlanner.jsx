import React, { useState } from "react";
import { Link } from "react-router-dom";

const AIPlanner = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    destination: "",
    duration: "",
    budget: "",
    interests: [],
    groupSize: "",
    travelStyle: "",
    accommodation: "",
    transportation: "",
    activities: [],
    specialRequirements: "",
  });

  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedPlan, setGeneratedPlan] = useState(null);

  const steps = [
    {
      number: 1,
      title: "ƒêi·ªÉm ƒë·∫øn",
      description: "Ch·ªçn n∆°i b·∫°n mu·ªën kh√°m ph√°",
      icon: "fas fa-map-marker-alt",
    },
    {
      number: 2,
      title: "S·ªü th√≠ch",
      description: "Chia s·∫ª nh·ªØng g√¨ b·∫°n y√™u th√≠ch",
      icon: "fas fa-heart",
    },
    {
      number: 3,
      title: "Chi ti·∫øt",
      description: "Ho√†n thi·ªán k·∫ø ho·∫°ch c·ªßa b·∫°n",
      icon: "fas fa-cog",
    },
  ];

  const interestOptions = [
    { id: "culture", label: "VƒÉn h√≥a & L·ªãch s·ª≠", icon: "fas fa-landmark" },
    { id: "nature", label: "Thi√™n nhi√™n", icon: "fas fa-mountain" },
    { id: "adventure", label: "Phi√™u l∆∞u", icon: "fas fa-hiking" },
    { id: "food", label: "·∫®m th·ª±c", icon: "fas fa-utensils" },
    { id: "relax", label: "Th∆∞ gi√£n", icon: "fas fa-spa" },
  ];

  const handleInterestToggle = (interestId) => {
    setFormData((prev) => ({
      ...prev,
      interests: prev.interests.includes(interestId)
        ? prev.interests.filter((id) => id !== interestId)
        : [...prev.interests, interestId],
    }));
  };

  const handleActivityToggle = (activityId) => {
    setFormData((prev) => ({
      ...prev,
      activities: prev.activities.includes(activityId)
        ? prev.activities.filter((id) => id !== activityId)
        : [...prev.activities, activityId],
    }));
  };

  const handleInputChange = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const activityOptions = [
    { id: "sightseeing", label: "Tham quan", icon: "fas fa-camera" },
    { id: "shopping", label: "Mua s·∫Øm", icon: "fas fa-shopping-bag" },
    { id: "nightlife", label: "Cu·ªôc s·ªëng v·ªÅ ƒë√™m", icon: "fas fa-moon" },
    { id: "museums", label: "B·∫£o t√†ng", icon: "fas fa-university" },
    { id: "beaches", label: "B√£i bi·ªÉn", icon: "fas fa-umbrella-beach" },
    { id: "hiking", label: "ƒêi b·ªô ƒë∆∞·ªùng d√†i", icon: "fas fa-hiking" },
    { id: "photography", label: "Ch·ª•p ·∫£nh", icon: "fas fa-camera-retro" },
    { id: "local-food", label: "·∫®m th·ª±c ƒë·ªãa ph∆∞∆°ng", icon: "fas fa-utensils" },
    { id: "festivals", label: "L·ªÖ h·ªôi", icon: "fas fa-music" },
  ];

  const nextStep = () => {
    if (currentStep < 3) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const generatePlan = async () => {
    setIsGenerating(true);

    // Simulate AI processing
    await new Promise((resolve) => setTimeout(resolve, 3000));

    setGeneratedPlan({
      title: `K·∫ø ho·∫°ch du l·ªãch ${formData.destination}`,
      duration: formData.duration,
      budget: formData.budget,
      itinerary: [
        {
          day: 1,
          title: "Kh√°m ph√° trung t√¢m th√†nh ph·ªë",
          activities: [
            "Tham quan ch·ª£ B·∫øn Th√†nh",
            "Tham quan Nh√† th·ªù ƒê·ª©c B√†",
            "ƒÇn tr∆∞a t·∫°i nh√† h√†ng ƒë·ªãa ph∆∞∆°ng",
            "Tham quan B∆∞u ƒëi·ªán Trung t√¢m",
            "T·∫£n b·ªô tr√™n ph·ªë ƒëi b·ªô Nguy·ªÖn Hu·ªá",
          ],
          meals: ["S√°ng: Ph·ªü", "Tr∆∞a: C∆°m t·∫•m", "T·ªëi: B√∫n b√≤ Hu·∫ø"],
          accommodation: "Kh√°ch s·∫°n 3 sao trung t√¢m",
          budget: "500,000‚Ç´",
        },
        {
          day: 2,
          title: "Kh√°m ph√° vƒÉn h√≥a v√† l·ªãch s·ª≠",
          activities: [
            "Tham quan Dinh ƒê·ªôc L·∫≠p",
            "Tham quan B·∫£o t√†ng Ch·ª©ng t√≠ch Chi·∫øn tranh",
            "ƒÇn tr∆∞a t·∫°i khu v·ª±c qu·∫≠n 1",
            "Tham quan Ch·ª£ B√¨nh T√¢y",
            "Th∆∞·ªüng th·ª©c c√† ph√™ S√†i G√≤n",
          ],
          meals: ["S√°ng: B√°nh m√¨", "Tr∆∞a: C∆°m g√†", "T·ªëi: L·∫©u c√°"],
          accommodation: "Kh√°ch s·∫°n 3 sao trung t√¢m",
          budget: "450,000‚Ç´",
        },
      ],
      totalBudget: "1,500,000‚Ç´",
      tips: [
        "Mang theo kem ch·ªëng n·∫Øng v√† m≈©",
        "ƒê·ªïi ti·ªÅn t·∫°i ng√¢n h√†ng ƒë·ªÉ c√≥ t·ª∑ gi√° t·ªët",
        "T·∫£i app Grab ƒë·ªÉ di chuy·ªÉn d·ªÖ d√†ng",
        "M·∫∑c qu·∫ßn √°o tho·∫£i m√°i, ph√π h·ª£p th·ªùi ti·∫øt",
      ],
    });

    setIsGenerating(false);
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-display font-bold text-gray-900 mb-3">
                B·∫°n mu·ªën ƒëi ƒë√¢u?
              </h2>
              <p className="text-gray-600">
                H√£y cho ch√∫ng t√¥i bi·∫øt v·ªÅ chuy·∫øn ƒëi trong m∆° c·ªßa b·∫°n
              </p>
            </div>

            {/* Destination Cards */}
            <div>
              <label className="block text-lg font-semibold text-gray-900 mb-6">
                ƒêi·ªÉm ƒë·∫øn mong mu·ªën
              </label>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
                {[
                  {
                    value: "hanoi",
                    name: "H√† N·ªôi",
                    icon: "üèõÔ∏è",
                    color: "from-red-400 to-red-600",
                  },
                  {
                    value: "halong",
                    name: "H·∫° Long",
                    icon: "‚õµ",
                    color: "from-blue-400 to-blue-600",
                  },
                  {
                    value: "sapa",
                    name: "Sapa",
                    icon: "üèîÔ∏è",
                    color: "from-green-400 to-green-600",
                  },
                  {
                    value: "hue",
                    name: "Hu·∫ø",
                    icon: "üèØ",
                    color: "from-purple-400 to-purple-600",
                  },
                  {
                    value: "hoian",
                    name: "H·ªôi An",
                    icon: "üèÆ",
                    color: "from-yellow-400 to-yellow-600",
                  },
                  {
                    value: "danang",
                    name: "ƒê√† N·∫µng",
                    icon: "üåâ",
                    color: "from-orange-400 to-orange-600",
                  },
                  {
                    value: "nhatrang",
                    name: "Nha Trang",
                    icon: "üèñÔ∏è",
                    color: "from-cyan-400 to-cyan-600",
                  },
                  {
                    value: "dalat",
                    name: "ƒê√† L·∫°t",
                    icon: "üå∏",
                    color: "from-pink-400 to-pink-600",
                  },
                  {
                    value: "hcmc",
                    name: "TP.HCM",
                    icon: "üèôÔ∏è",
                    color: "from-indigo-400 to-indigo-600",
                  },
                  {
                    value: "phuquoc",
                    name: "Ph√∫ Qu·ªëc",
                    icon: "üèùÔ∏è",
                    color: "from-teal-400 to-teal-600",
                  },
                ].map((dest) => (
                  <button
                    key={dest.value}
                    type="button"
                    onClick={() => handleInputChange("destination", dest.value)}
                    className={`p-4 rounded-2xl border-2 transition-all duration-200 transform hover:scale-105 ${
                      formData.destination === dest.value
                        ? "border-primary-500 bg-primary-50 shadow-lg"
                        : "border-gray-200 hover:border-primary-300 hover:shadow-md"
                    }`}
                  >
                    <div
                      className={`w-12 h-12 mx-auto mb-3 rounded-xl bg-gradient-to-r ${dest.color} flex items-center justify-center text-white text-xl`}
                    >
                      {dest.icon}
                    </div>
                    <div className="font-medium text-gray-900 text-sm">
                      {dest.name}
                    </div>
                  </button>
                ))}
              </div>
            </div>

            {/* Duration and Budget */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div>
                <label className="block text-lg font-semibold text-gray-900 mb-4">
                  Th·ªùi gian du l·ªãch
                </label>
                <div className="space-y-3">
                  {[
                    { value: "1-2", label: "1-2 ng√†y", desc: "Cu·ªëi tu·∫ßn ng·∫Øn" },
                    { value: "3-4", label: "3-4 ng√†y", desc: "Ngh·ªâ l·ªÖ" },
                    { value: "5-7", label: "5-7 ng√†y", desc: "Tu·∫ßn du l·ªãch" },
                    { value: "8-14", label: "8-14 ng√†y", desc: "K·ª≥ ngh·ªâ d√†i" },
                    {
                      value: "15+",
                      label: "Tr√™n 15 ng√†y",
                      desc: "Kh√°m ph√° s√¢u",
                    },
                  ].map((dur) => (
                    <button
                      key={dur.value}
                      type="button"
                      onClick={() => handleInputChange("duration", dur.value)}
                      className={`w-full p-4 rounded-xl border-2 text-left transition-all duration-200 ${
                        formData.duration === dur.value
                          ? "border-primary-500 bg-primary-50 text-primary-700"
                          : "border-gray-200 hover:border-primary-300 hover:bg-gray-50"
                      }`}
                    >
                      <div className="font-semibold">{dur.label}</div>
                      <div className="text-sm text-gray-500">{dur.desc}</div>
                    </button>
                  ))}
                </div>
              </div>

              <div>
                <label className="block text-lg font-semibold text-gray-900 mb-4">
                  Ng√¢n s√°ch d·ª± ki·∫øn
                </label>
                <div className="space-y-3">
                  {[
                    {
                      value: "under-1m",
                      label: "D∆∞·ªõi 1 tri·ªáu",
                      desc: "Ti·∫øt ki·ªám",
                    },
                    { value: "1-3m", label: "1-3 tri·ªáu", desc: "Ph·ªï bi·∫øn" },
                    { value: "3-5m", label: "3-5 tri·ªáu", desc: "Tho·∫£i m√°i" },
                    { value: "5-10m", label: "5-10 tri·ªáu", desc: "Cao c·∫•p" },
                    {
                      value: "over-10m",
                      label: "Tr√™n 10 tri·ªáu",
                      desc: "Sang tr·ªçng",
                    },
                  ].map((budget) => (
                    <button
                      key={budget.value}
                      type="button"
                      onClick={() => handleInputChange("budget", budget.value)}
                      className={`w-full p-4 rounded-xl border-2 text-left transition-all duration-200 ${
                        formData.budget === budget.value
                          ? "border-primary-500 bg-primary-50 text-primary-700"
                          : "border-gray-200 hover:border-primary-300 hover:bg-gray-50"
                      }`}
                    >
                      <div className="font-semibold">{budget.label}</div>
                      <div className="text-sm text-gray-500">{budget.desc}</div>
                    </button>
                  ))}
                </div>
              </div>
            </div>

            {/* Group Size */}
            <div>
              <label className="block text-lg font-semibold text-gray-900 mb-4">
                S·ªë l∆∞·ª£ng ng∆∞·ªùi
              </label>
              <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                {[
                  { value: "1", label: "1 ng∆∞·ªùi", icon: "üë§" },
                  { value: "2", label: "2 ng∆∞·ªùi", icon: "üë´" },
                  { value: "3-4", label: "3-4 ng∆∞·ªùi", icon: "üë®‚Äçüë©‚Äçüë¶" },
                  { value: "5-8", label: "5-8 ng∆∞·ªùi", icon: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶" },
                  { value: "9+", label: "Tr√™n 9 ng∆∞·ªùi", icon: "üë•" },
                ].map((size) => (
                  <button
                    key={size.value}
                    type="button"
                    onClick={() => handleInputChange("groupSize", size.value)}
                    className={`p-4 rounded-xl border-2 transition-all duration-200 text-center ${
                      formData.groupSize === size.value
                        ? "border-primary-500 bg-primary-50 text-primary-700"
                        : "border-gray-200 hover:border-primary-300 hover:bg-gray-50"
                    }`}
                  >
                    <div className="text-2xl mb-2">{size.icon}</div>
                    <div className="font-medium text-sm">{size.label}</div>
                  </button>
                ))}
              </div>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-display font-bold text-gray-900 mb-3">
                B·∫°n th√≠ch g√¨?
              </h2>
              <p className="text-gray-600">
                H√£y chia s·∫ª s·ªü th√≠ch ƒë·ªÉ ch√∫ng t√¥i t·∫°o k·∫ø ho·∫°ch ph√π h·ª£p nh·∫•t
              </p>
            </div>

            {/* Interests */}
            <div>
              <label className="block text-lg font-semibold text-gray-900 mb-6">
                S·ªü th√≠ch c·ªßa b·∫°n{" "}
                <span className="text-sm text-gray-500">(ch·ªçn nhi·ªÅu)</span>
              </label>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
                {interestOptions.map((option) => (
                  <button
                    key={option.id}
                    type="button"
                    onClick={() => handleInterestToggle(option.id)}
                    className={`p-6 rounded-2xl border-2 transition-all duration-200 transform hover:scale-105 text-center ${
                      formData.interests.includes(option.id)
                        ? "border-primary-500 bg-gradient-to-br from-primary-50 to-accent-50 text-primary-700 shadow-lg"
                        : "border-gray-200 hover:border-primary-300 hover:bg-gray-50 hover:shadow-md"
                    }`}
                  >
                    <i
                      className={`${option.icon} text-3xl mb-3 block ${
                        formData.interests.includes(option.id)
                          ? "text-primary-600"
                          : "text-gray-500"
                      }`}
                    ></i>
                    <span className="text-sm font-semibold">
                      {option.label}
                    </span>
                    {formData.interests.includes(option.id) && (
                      <div className="absolute top-2 right-2 w-6 h-6 bg-primary-600 rounded-full flex items-center justify-center">
                        <i className="fas fa-check text-white text-xs"></i>
                      </div>
                    )}
                  </button>
                ))}
              </div>
            </div>

            {/* Travel Style */}
            <div>
              <label className="block text-lg font-semibold text-gray-900 mb-6">
                Phong c√°ch du l·ªãch
              </label>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {[
                  {
                    value: "budget",
                    label: "Ti·∫øt ki·ªám",
                    desc: "T·ªëi ∆∞u chi ph√≠",
                    icon: "üí∞",
                    color: "from-green-400 to-green-600",
                  },
                  {
                    value: "comfort",
                    label: "Tho·∫£i m√°i",
                    desc: "C√¢n b·∫±ng gi√° v√† ch·∫•t l∆∞·ª£ng",
                    icon: "‚ú®",
                    color: "from-blue-400 to-blue-600",
                  },
                  {
                    value: "luxury",
                    label: "Sang tr·ªçng",
                    desc: "Tr·∫£i nghi·ªám cao c·∫•p",
                    icon: "üëë",
                    color: "from-purple-400 to-purple-600",
                  },
                  {
                    value: "adventure",
                    label: "M·∫°o hi·ªÉm",
                    desc: "Th√≠ch th√∫ th√°ch",
                    icon: "üèîÔ∏è",
                    color: "from-orange-400 to-orange-600",
                  },
                  {
                    value: "cultural",
                    label: "VƒÉn h√≥a",
                    desc: "Kh√°m ph√° l·ªãch s·ª≠",
                    icon: "üèõÔ∏è",
                    color: "from-red-400 to-red-600",
                  },
                  {
                    value: "relax",
                    label: "Th∆∞ gi√£n",
                    desc: "Ngh·ªâ ng∆°i, t√°i t·∫°o",
                    icon: "üßò",
                    color: "from-teal-400 to-teal-600",
                  },
                ].map((style) => (
                  <button
                    key={style.value}
                    type="button"
                    onClick={() =>
                      handleInputChange("travelStyle", style.value)
                    }
                    className={`p-6 rounded-2xl border-2 transition-all duration-200 transform hover:scale-105 ${
                      formData.travelStyle === style.value
                        ? "border-primary-500 bg-primary-50 shadow-lg"
                        : "border-gray-200 hover:border-primary-300 hover:shadow-md"
                    }`}
                  >
                    <div
                      className={`w-12 h-12 mx-auto mb-4 rounded-xl bg-gradient-to-r ${style.color} flex items-center justify-center text-white text-xl`}
                    >
                      {style.icon}
                    </div>
                    <div className="font-semibold text-gray-900 mb-2">
                      {style.label}
                    </div>
                    <div className="text-sm text-gray-500">{style.desc}</div>
                  </button>
                ))}
              </div>
            </div>

            {/* Accommodation and Transportation */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div>
                <label className="block text-lg font-semibold text-gray-900 mb-4">
                  Lo·∫°i h√¨nh l∆∞u tr√∫
                </label>
                <div className="space-y-3">
                  {[
                    {
                      value: "hostel",
                      label: "Hostel",
                      desc: "Gi√° r·∫ª, g·∫∑p g·ª° b·∫°n b√®",
                      icon: "üè†",
                    },
                    {
                      value: "hotel",
                      label: "Kh√°ch s·∫°n",
                      desc: "Ti·ªán nghi ƒë·∫ßy ƒë·ªß",
                      icon: "üè®",
                    },
                    {
                      value: "resort",
                      label: "Resort",
                      desc: "Ngh·ªâ d∆∞·ª°ng cao c·∫•p",
                      icon: "üèñÔ∏è",
                    },
                    {
                      value: "homestay",
                      label: "Homestay",
                      desc: "Tr·∫£i nghi·ªám ƒë·ªãa ph∆∞∆°ng",
                      icon: "üè°",
                    },
                    {
                      value: "villa",
                      label: "Villa",
                      desc: "Ri√™ng t∆∞, sang tr·ªçng",
                      icon: "üèòÔ∏è",
                    },
                  ].map((acc) => (
                    <button
                      key={acc.value}
                      type="button"
                      onClick={() =>
                        handleInputChange("accommodation", acc.value)
                      }
                      className={`w-full p-4 rounded-xl border-2 text-left transition-all duration-200 flex items-center ${
                        formData.accommodation === acc.value
                          ? "border-primary-500 bg-primary-50 text-primary-700"
                          : "border-gray-200 hover:border-primary-300 hover:bg-gray-50"
                      }`}
                    >
                      <span className="text-2xl mr-4">{acc.icon}</span>
                      <div>
                        <div className="font-semibold">{acc.label}</div>
                        <div className="text-sm text-gray-500">{acc.desc}</div>
                      </div>
                    </button>
                  ))}
                </div>
              </div>

              <div>
                <label className="block text-lg font-semibold text-gray-900 mb-4">
                  Ph∆∞∆°ng ti·ªán di chuy·ªÉn
                </label>
                <div className="space-y-3">
                  {[
                    {
                      value: "bus",
                      label: "Xe kh√°ch",
                      desc: "Ti·∫øt ki·ªám, ph·ªï bi·∫øn",
                      icon: "üöå",
                    },
                    {
                      value: "train",
                      label: "T√†u h·ªèa",
                      desc: "Tho·∫£i m√°i, ng·∫Øm c·∫£nh",
                      icon: "üöÇ",
                    },
                    {
                      value: "plane",
                      label: "M√°y bay",
                      desc: "Nhanh ch√≥ng, thu·∫≠n ti·ªán",
                      icon: "‚úàÔ∏è",
                    },
                    {
                      value: "car",
                      label: "√î t√¥ ri√™ng",
                      desc: "T·ª± do, linh ho·∫°t",
                      icon: "üöó",
                    },
                    {
                      value: "motorbike",
                      label: "Xe m√°y",
                      desc: "Phi√™u l∆∞u, kh√°m ph√°",
                      icon: "üèçÔ∏è",
                    },
                  ].map((trans) => (
                    <button
                      key={trans.value}
                      type="button"
                      onClick={() =>
                        handleInputChange("transportation", trans.value)
                      }
                      className={`w-full p-4 rounded-xl border-2 text-left transition-all duration-200 flex items-center ${
                        formData.transportation === trans.value
                          ? "border-primary-500 bg-primary-50 text-primary-700"
                          : "border-gray-200 hover:border-primary-300 hover:bg-gray-50"
                      }`}
                    >
                      <span className="text-2xl mr-4">{trans.icon}</span>
                      <div>
                        <div className="font-semibold">{trans.label}</div>
                        <div className="text-sm text-gray-500">
                          {trans.desc}
                        </div>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-display font-bold text-gray-900 mb-3">
                Ho√†n thi·ªán k·∫ø ho·∫°ch
              </h2>
              <p className="text-gray-600">
                M·ªôt v√†i chi ti·∫øt cu·ªëi ƒë·ªÉ t·∫°o ra k·∫ø ho·∫°ch ho√†n h·∫£o cho b·∫°n
              </p>
            </div>

            {/* Activities */}
            <div>
              <label className="block text-lg font-semibold text-gray-900 mb-6">
                Ho·∫°t ƒë·ªông y√™u th√≠ch{" "}
                <span className="text-sm text-gray-500">(ch·ªçn nhi·ªÅu)</span>
              </label>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                {activityOptions.map((option) => (
                  <button
                    key={option.id}
                    type="button"
                    onClick={() => handleActivityToggle(option.id)}
                    className={`p-6 rounded-2xl border-2 transition-all duration-200 transform hover:scale-105 text-center relative ${
                      formData.activities.includes(option.id)
                        ? "border-primary-500 bg-gradient-to-br from-primary-50 to-accent-50 text-primary-700 shadow-lg"
                        : "border-gray-200 hover:border-primary-300 hover:bg-gray-50 hover:shadow-md"
                    }`}
                  >
                    <i
                      className={`${option.icon} text-2xl mb-3 block ${
                        formData.activities.includes(option.id)
                          ? "text-primary-600"
                          : "text-gray-500"
                      }`}
                    ></i>
                    <span className="text-sm font-semibold">
                      {option.label}
                    </span>
                    {formData.activities.includes(option.id) && (
                      <div className="absolute top-2 right-2 w-6 h-6 bg-primary-600 rounded-full flex items-center justify-center">
                        <i className="fas fa-check text-white text-xs"></i>
                      </div>
                    )}
                  </button>
                ))}
              </div>
            </div>

            {/* Special Requirements */}
            <div>
              <label className="block text-lg font-semibold text-gray-900 mb-4">
                Y√™u c·∫ßu ƒë·∫∑c bi·ªát
              </label>
              <div className="bg-gray-50 rounded-2xl p-6">
                <textarea
                  value={formData.specialRequirements}
                  onChange={(e) =>
                    handleInputChange("specialRequirements", e.target.value)
                  }
                  placeholder="V√≠ d·ª•: ƒÇn chay, khuy·∫øt t·∫≠t, d·ªã ·ª©ng th·ª©c ƒÉn, c·∫ßn ph√≤ng kh√¥ng h√∫t thu·ªëc, mu·ªën c√≥ h∆∞·ªõng d·∫´n vi√™n n√≥i ti·∫øng Anh..."
                  className="w-full bg-white border-2 border-gray-200 rounded-xl p-4 focus:border-primary-500 focus:outline-none transition-colors duration-200 resize-none"
                  rows={4}
                />
                <div className="flex items-center mt-4 text-sm text-gray-500">
                  <i className="fas fa-info-circle mr-2"></i>
                  Nh·ªØng th√¥ng tin n√†y gi√∫p ch√∫ng t√¥i t·∫°o k·∫ø ho·∫°ch ph√π h·ª£p nh·∫•t
                  v·ªõi b·∫°n
                </div>
              </div>
            </div>

            {/* Summary Preview */}
            <div className="bg-gradient-to-br from-blue-50 to-purple-50 rounded-2xl p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                <i className="fas fa-eye text-primary-600 mr-2"></i>
                Xem tr∆∞·ªõc k·∫ø ho·∫°ch
              </h3>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                <div className="bg-white rounded-xl p-4">
                  <div className="text-2xl mb-2">üìç</div>
                  <div className="font-semibold text-gray-900">
                    {formData.destination
                      ? formData.destination.charAt(0).toUpperCase() +
                        formData.destination.slice(1)
                      : "Ch∆∞a ch·ªçn"}
                  </div>
                  <div className="text-xs text-gray-500">ƒêi·ªÉm ƒë·∫øn</div>
                </div>
                <div className="bg-white rounded-xl p-4">
                  <div className="text-2xl mb-2">‚è∞</div>
                  <div className="font-semibold text-gray-900">
                    {formData.duration || "Ch∆∞a ch·ªçn"}
                  </div>
                  <div className="text-xs text-gray-500">Th·ªùi gian</div>
                </div>
                <div className="bg-white rounded-xl p-4">
                  <div className="text-2xl mb-2">üí∞</div>
                  <div className="font-semibold text-gray-900">
                    {formData.budget || "Ch∆∞a ch·ªçn"}
                  </div>
                  <div className="text-xs text-gray-500">Ng√¢n s√°ch</div>
                </div>
                <div className="bg-white rounded-xl p-4">
                  <div className="text-2xl mb-2">‚ù§Ô∏è</div>
                  <div className="font-semibold text-gray-900">
                    {formData.interests.length} s·ªü th√≠ch
                  </div>
                  <div className="text-xs text-gray-500">ƒê√£ ch·ªçn</div>
                </div>
              </div>
              {formData.destination &&
                formData.duration &&
                formData.budget &&
                formData.interests.length > 0 && (
                  <div className="mt-4 p-4 bg-green-100 rounded-xl flex items-center justify-center text-green-700">
                    <i className="fas fa-check-circle mr-2"></i>
                    <span className="font-medium">
                      S·∫µn s√†ng t·∫°o k·∫ø ho·∫°ch AI!
                    </span>
                  </div>
                )}
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  if (generatedPlan) {
    return (
      <div className="min-h-screen bg-gray-50 py-12">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <div className="w-20 h-20 mx-auto mb-6 bg-gradient-to-br from-green-500 to-blue-600 rounded-2xl flex items-center justify-center">
              <i className="fas fa-check text-white text-3xl"></i>
            </div>
            <h1 className="text-4xl font-display font-bold text-gray-900 mb-4">
              K·∫ø ho·∫°ch du l·ªãch ƒë√£ s·∫µn s√†ng!
            </h1>
            <p className="text-xl text-gray-600">
              AI ƒë√£ t·∫°o ra k·∫ø ho·∫°ch du l·ªãch ho√†n h·∫£o d√†nh ri√™ng cho b·∫°n
            </p>
          </div>

          <div className="card p-8 mb-8">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-display font-bold text-gray-900">
                {generatedPlan.title}
              </h2>
              <div className="flex space-x-4">
                <button className="btn btn-outline">
                  <i className="fas fa-download mr-2"></i>
                  T·∫£i PDF
                </button>
                <button className="btn btn-primary">
                  <i className="fas fa-share mr-2"></i>
                  Chia s·∫ª
                </button>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
              <div className="text-center p-4 bg-blue-50 rounded-xl">
                <i className="fas fa-clock text-blue-600 text-2xl mb-2"></i>
                <div className="font-semibold text-gray-900">
                  {generatedPlan.duration}
                </div>
                <div className="text-sm text-gray-600">Th·ªùi gian</div>
              </div>
              <div className="text-center p-4 bg-green-50 rounded-xl">
                <i className="fas fa-wallet text-green-600 text-2xl mb-2"></i>
                <div className="font-semibold text-gray-900">
                  {generatedPlan.totalBudget}
                </div>
                <div className="text-sm text-gray-600">T·ªïng ng√¢n s√°ch</div>
              </div>
              <div className="text-center p-4 bg-purple-50 rounded-xl">
                <i className="fas fa-route text-purple-600 text-2xl mb-2"></i>
                <div className="font-semibold text-gray-900">
                  {generatedPlan.itinerary.length} ng√†y
                </div>
                <div className="text-sm text-gray-600">L·ªãch tr√¨nh</div>
              </div>
            </div>

            <div className="space-y-6">
              {generatedPlan.itinerary.map((day, index) => (
                <div
                  key={index}
                  className="border border-gray-200 rounded-xl p-6"
                >
                  <h3 className="text-xl font-display font-bold text-gray-900 mb-4">
                    Ng√†y {day.day}: {day.title}
                  </h3>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                        <i className="fas fa-list-ul text-primary-600 mr-2"></i>
                        Ho·∫°t ƒë·ªông
                      </h4>
                      <ul className="space-y-2">
                        {day.activities.map((activity, actIndex) => (
                          <li key={actIndex} className="flex items-start">
                            <i className="fas fa-check-circle text-green-500 mr-3 mt-1"></i>
                            <span className="text-gray-700">{activity}</span>
                          </li>
                        ))}
                      </ul>
                    </div>

                    <div>
                      <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                        <i className="fas fa-utensils text-primary-600 mr-2"></i>
                        ·∫®m th·ª±c
                      </h4>
                      <ul className="space-y-2">
                        {day.meals.map((meal, mealIndex) => (
                          <li key={mealIndex} className="text-gray-700">
                            {meal}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>

                  <div className="mt-4 pt-4 border-t border-gray-200 flex justify-between items-center">
                    <div className="text-sm text-gray-600">
                      <i className="fas fa-bed mr-1"></i>
                      {day.accommodation}
                    </div>
                    <div className="font-semibold text-primary-600">
                      {day.budget}
                    </div>
                  </div>
                </div>
              ))}
            </div>

            <div className="mt-8 p-6 bg-yellow-50 rounded-xl">
              <h4 className="font-semibold text-gray-900 mb-4 flex items-center">
                <i className="fas fa-lightbulb text-yellow-600 mr-2"></i>
                M·∫πo du l·ªãch
              </h4>
              <ul className="space-y-2">
                {generatedPlan.tips.map((tip, index) => (
                  <li key={index} className="flex items-start">
                    <i className="fas fa-star text-yellow-500 mr-3 mt-1"></i>
                    <span className="text-gray-700">{tip}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>

          <div className="text-center">
            <button
              onClick={() => {
                setGeneratedPlan(null);
                setCurrentStep(1);
                setFormData({
                  destination: "",
                  duration: "",
                  budget: "",
                  interests: [],
                  groupSize: "",
                  travelStyle: "",
                  accommodation: "",
                  transportation: "",
                  activities: [],
                  specialRequirements: "",
                });
              }}
              className="btn btn-outline mr-4"
            >
              <i className="fas fa-redo mr-2"></i>
              T·∫°o k·∫ø ho·∫°ch m·ªõi
            </button>
            <Link to="/tours" className="btn btn-primary">
              <i className="fas fa-calendar-check mr-2"></i>
              ƒê·∫∑t tour ngay
            </Link>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* Hero Section */}
      <div
        className="relative overflow-hidden py-24"
        style={{
          backgroundImage: "url('./src/assets/images/ai-planner.jpg')",
          backgroundSize: "cover",
          backgroundPosition: "center",
        }}
      >
        <div className="absolute inset-0 bg-black/30"></div>
        <div className="relative max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <div className="inline-block p-4 bg-white/20 backdrop-blur-sm rounded-2xl mb-6">
            <i className="fas fa-magic text-white text-4xl"></i>
          </div>
          <h1 className="text-5xl lg:text-7xl font-display font-bold text-white mb-6 text-shadow-lg">
            AI Trip Planner
          </h1>
          <p className="text-xl lg:text-2xl text-white/90 max-w-3xl mx-auto mb-8 text-shadow">
            T·∫°o k·∫ø ho·∫°ch du l·ªãch th√¥ng minh trong v√†i ph√∫t v·ªõi s·ª©c m·∫°nh c·ªßa AI
          </p>
          {/* Stats */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-6 max-w-2xl mx-auto">
            <div className="text-center">
              <div className="text-2xl font-bold text-white">1M+</div>
              <div className="text-white/80 text-sm">K·∫ø ho·∫°ch t·∫°o</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-white">50+</div>
              <div className="text-white/80 text-sm">ƒêi·ªÉm ƒë·∫øn</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-white">4.9‚òÖ</div>
              <div className="text-white/80 text-sm">ƒê√°nh gi√°</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-white">24/7</div>
              <div className="text-white/80 text-sm">H·ªó tr·ª£</div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="relative -mt-16 max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 pb-20">
        {/* Progress Steps */}
        <div className="bg-white rounded-3xl shadow-xl border border-gray-100 p-8 mb-8">
          <div className="flex items-center justify-center mb-8">
            {steps.map((step, index) => (
              <div key={step.number} className="flex items-center">
                <div className="flex flex-col items-center">
                  <div
                    className={`w-16 h-16 rounded-2xl flex items-center justify-center text-sm font-bold transition-all duration-300 ${
                      currentStep >= step.number
                        ? "bg-gradient-to-r from-primary-600 to-accent-600 text-white shadow-lg scale-110"
                        : currentStep === step.number
                        ? "bg-primary-100 text-primary-600 border-2 border-primary-300"
                        : "bg-gray-100 text-gray-400"
                    }`}
                  >
                    <i className={`${step.icon} text-lg`}></i>
                  </div>
                  <div className="mt-3 text-center">
                    <div
                      className={`text-sm font-semibold ${
                        currentStep >= step.number
                          ? "text-primary-600"
                          : "text-gray-400"
                      }`}
                    >
                      {step.title}
                    </div>
                    <div className="text-xs text-gray-500 mt-1 max-w-24">
                      {step.description}
                    </div>
                  </div>
                </div>
                {index < steps.length - 1 && (
                  <div className="flex-1 mx-8 mt-8">
                    <div
                      className={`h-1 rounded-full transition-all duration-300 ${
                        currentStep > step.number
                          ? "bg-gradient-to-r from-primary-600 to-accent-600"
                          : "bg-gray-200"
                      }`}
                    />
                  </div>
                )}
              </div>
            ))}
          </div>

          {/* Step Counter */}
          <div className="text-center mb-8">
            <div className="text-sm text-gray-500">
              B∆∞·ªõc {currentStep} / {steps.length}
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
              <div
                className="bg-gradient-to-r from-primary-600 to-accent-600 h-2 rounded-full transition-all duration-500"
                style={{ width: `${(currentStep / steps.length) * 100}%` }}
              ></div>
            </div>
          </div>

          {/* Form Content */}
          <div className="min-h-96">{renderStepContent()}</div>

          {/* Navigation Buttons */}
          <div className="flex justify-between items-center mt-12 pt-8 border-t border-gray-100">
            <button
              onClick={prevStep}
              disabled={currentStep === 1}
              className={`flex items-center px-6 py-3 rounded-xl font-medium transition-all duration-200 ${
                currentStep === 1
                  ? "text-gray-400 cursor-not-allowed invisible"
                  : "text-gray-600 hover:text-primary-600 hover:bg-primary-50"
              }`}
            >
              <i className="fas fa-arrow-left mr-2"></i>
              Quay l·∫°i
            </button>

            <div className="flex space-x-2">
              {steps.map((_, index) => (
                <div
                  key={index}
                  className={`w-2 h-2 rounded-full transition-all duration-200 ${
                    index + 1 <= currentStep ? "bg-primary-600" : "bg-gray-200"
                  }`}
                />
              ))}
            </div>

            {currentStep < 3 ? (
              <button
                onClick={nextStep}
                className="flex items-center px-8 py-4 bg-gradient-to-r from-primary-600 to-accent-600 text-white rounded-xl font-semibold hover:from-primary-700 hover:to-accent-700 transform hover:scale-105 transition-all duration-200 shadow-lg hover:shadow-xl"
              >
                Ti·∫øp theo
                <i className="fas fa-arrow-right ml-2"></i>
              </button>
            ) : (
              <button
                onClick={generatePlan}
                disabled={isGenerating}
                className={`flex items-center px-8 py-4 rounded-xl font-semibold transition-all duration-200 shadow-lg ${
                  isGenerating
                    ? "bg-gray-400 cursor-not-allowed"
                    : "bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700 transform hover:scale-105 shadow-xl hover:shadow-2xl"
                } text-white`}
              >
                {isGenerating ? (
                  <>
                    <i className="fas fa-spinner fa-spin mr-3"></i>
                    ƒêang t·∫°o k·∫ø ho·∫°ch...
                  </>
                ) : (
                  <>
                    <i className="fas fa-sparkles mr-3"></i>
                    T·∫°o k·∫ø ho·∫°ch AI
                  </>
                )}
              </button>
            )}
          </div>
        </div>

        {/* Features */}
        <div className="mt-16 grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-white rounded-2xl p-8 shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-2 border border-gray-100">
            <div className="w-16 h-16 mx-auto mb-6 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center transform hover:scale-110 transition-transform duration-200">
              <i className="fas fa-brain text-white text-2xl"></i>
            </div>
            <h3 className="text-xl font-display font-bold text-gray-900 mb-4 text-center">
              AI Th√¥ng minh
            </h3>
            <p className="text-gray-600 text-center leading-relaxed">
              S·ª≠ d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o ƒë·ªÉ ph√¢n t√≠ch s·ªü th√≠ch v√† t·∫°o l·ªô tr√¨nh t·ªëi
              ∆∞u cho t·ª´ng c√° nh√¢n
            </p>
          </div>

          <div className="bg-white rounded-2xl p-8 shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-2 border border-gray-100">
            <div className="w-16 h-16 mx-auto mb-6 bg-gradient-to-br from-green-500 to-teal-600 rounded-2xl flex items-center justify-center transform hover:scale-110 transition-transform duration-200">
              <i className="fas fa-clock text-white text-2xl"></i>
            </div>
            <h3 className="text-xl font-display font-bold text-gray-900 mb-4 text-center">
              Ti·∫øt ki·ªám th·ªùi gian
            </h3>
            <p className="text-gray-600 text-center leading-relaxed">
              T·∫°o k·∫ø ho·∫°ch du l·ªãch ho√†n ch·ªânh ch·ªâ trong v√†i ph√∫t thay v√¨ h√†ng
              gi·ªù nghi√™n c·ª©u
            </p>
          </div>

          <div className="bg-white rounded-2xl p-8 shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-2 border border-gray-100">
            <div className="w-16 h-16 mx-auto mb-6 bg-gradient-to-br from-yellow-500 to-orange-600 rounded-2xl flex items-center justify-center transform hover:scale-110 transition-transform duration-200">
              <i className="fas fa-user-cog text-white text-2xl"></i>
            </div>
            <h3 className="text-xl font-display font-bold text-gray-900 mb-4 text-center">
              C√° nh√¢n h√≥a
            </h3>
            <p className="text-gray-600 text-center leading-relaxed">
              L·ªô tr√¨nh ƒë∆∞·ª£c thi·∫øt k·∫ø ri√™ng theo s·ªü th√≠ch, ng√¢n s√°ch v√† phong
              c√°ch du l·ªãch c·ªßa b·∫°n
            </p>
          </div>
        </div>

        {/* Testimonials */}
        <div className="mt-20 bg-white rounded-3xl p-12 shadow-xl border border-gray-100">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-display font-bold text-gray-900 mb-4">
              Kh√°ch h√†ng n√≥i g√¨ v·ªÅ ch√∫ng t√¥i
            </h2>
            <p className="text-gray-600">
              H∆°n 10,000+ kh√°ch h√†ng ƒë√£ tin t∆∞·ªüng s·ª≠ d·ª•ng d·ªãch v·ª•
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div className="bg-gradient-to-br from-blue-50 to-purple-50 rounded-2xl p-6">
              <div className="flex mb-4">
                {[...Array(5)].map((_, i) => (
                  <i key={i} className="fas fa-star text-yellow-400"></i>
                ))}
              </div>
              <p className="text-gray-700 mb-4 italic">
                "AI Planner ƒë√£ gi√∫p t√¥i t·∫°o ra chuy·∫øn du l·ªãch Sapa tuy·ªát v·ªùi.
                M·ªçi th·ª© ƒë∆∞·ª£c s·∫Øp x·∫øp chi ti·∫øt v√† ph√π h·ª£p v·ªõi ng√¢n s√°ch."
              </p>
              <div className="flex items-center">
                <div className="w-10 h-10 bg-gradient-to-r from-primary-600 to-accent-600 rounded-full flex items-center justify-center text-white font-bold mr-3">
                  A
                </div>
                <div>
                  <div className="font-semibold">Nguy·ªÖn VƒÉn An</div>
                  <div className="text-sm text-gray-500">Kh√°ch h√†ng VIP</div>
                </div>
              </div>
            </div>

            <div className="bg-gradient-to-br from-green-50 to-teal-50 rounded-2xl p-6">
              <div className="flex mb-4">
                {[...Array(5)].map((_, i) => (
                  <i key={i} className="fas fa-star text-yellow-400"></i>
                ))}
              </div>
              <p className="text-gray-700 mb-4 italic">
                "D·ªãch v·ª• tuy·ªát v·ªùi! AI hi·ªÉu r√µ s·ªü th√≠ch c·ªßa t√¥i v√† t·∫°o ra k·∫ø
                ho·∫°ch ho√†n h·∫£o cho chuy·∫øn ƒëi Ph√∫ Qu·ªëc."
              </p>
              <div className="flex items-center">
                <div className="w-10 h-10 bg-gradient-to-r from-green-500 to-teal-600 rounded-full flex items-center justify-center text-white font-bold mr-3">
                  M
                </div>
                <div>
                  <div className="font-semibold">Tr·∫ßn Th·ªã Mai</div>
                  <div className="text-sm text-gray-500">
                    Du kh√°ch th∆∞·ªùng xuy√™n
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AIPlanner;
